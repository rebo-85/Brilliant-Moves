//@version=6
indicator("Brilliant Moves v.1.4.1 [ReBo]", overlay=true)
//===============================================================================
// Internal Data
//===============================================================================
// --- Functions ---
method clamp(float val, float min_val, float max_val) =>
    val > max_val ? max_val : val < min_val ? min_val : val

method get_position(string position) =>
    switch position
        'Bottom Center'   => position.bottom_center
        'Bottom Left'   => position.bottom_left
        'Bottom Right'  => position.bottom_right
        'Middle Center' => position.middle_center
        'Middle Left' => position.middle_left
        'Middle Right' => position.middle_right
        'Top Center' => position.top_center
        'Top Left' => position.top_left
        'Top Right' => position.top_right

method get_size(string size) =>
    switch size
        'Auto'   => size.auto
        'Tiny'   => size.tiny
        'Small'  => size.small
        'Normal' => size.normal
        'Large' => size.large
        'Huge' => size.huge

method get_source(string type) =>
    switch type
        "Open"   => open
        "High"   => high
        "Low"    => low
        "HL2"    => (high + low) / 2
        "HLC3"   => (high + low + close) / 3
        "OHLC4"  => (open + high + low + close) / 4
        "Volume" => volume
        => close 
    
method get_tf_trend(string tf, int len) =>
    var open_ = request.security(syminfo.tickerid, tf, open[len - 1], lookahead=barmerge.lookahead_off)
    var close_ = request.security(syminfo.tickerid, tf, close, lookahead=barmerge.lookahead_off)
    int trend = close_ > open_ ? 1 : close_ < open_ ? -1 : 0
    trend


// --- Types ---
// --- Variables ---
string gen_group    = '========================================================== '
string db_group     = '==========================================================  '
string bb_group     = '==========================================================   '
string ema_group    = '==========================================================    '

//===============================================================================
// Processes
//===============================================================================

// --- General ---      
// Inputs                                                                                     
string macd_header  = input.string(defval = '', title = "MACD                                                                                     ", inline = 'macd', group = gen_group, display = display.none)
int macd_fast_len   = input.int(defval = 12, title = "      Fast Period", minval = 1, group = gen_group, display = display.none)
int macd_slow_len   = input.int(defval = 26, title = "      Slow Period", minval = 1, group = gen_group, display = display.none)
int macd_len        = input.int(defval = 9, title = "      Signal Period", minval = 1, group = gen_group, display = display.none)

string voli_header  = input.string(defval = '', title = "VOLATILITY INDEX                                                                                     ", inline = 'voli', group = gen_group, display = display.none)
int atr_len         = input.int(defval = 10, title = "      ATR Period", minval = 1, group = gen_group, display = display.none)
int atr_smoothing   = input.int(defval = 20, title = "      Smoothing Period", minval = 1, group = gen_group, display = display.none)

string rsi_header  = input.string(defval = '', title = "RSI                                                                                     ", inline = 'rsi', group = gen_group, display = display.none)
string rsi_src_type = input.string(defval = "Close", title = "      Source", options = ["Close", "Open", "High", "Low", "HL2", "HLC3", "OHLC4", "Volume"], group = gen_group, display = display.none)
int rsi_len         = input.int(defval = 14, title = "      Period", minval = 1, group = gen_group, display = display.none)

string dmi_header  = input.string(defval = '', title = "DMI                                                                                     ", inline = 'dmi', group = gen_group, display = display.none)
int dmi_smoothing   = input.int(defval = 14, title = "      Smoothing Period", minval = 1, group = gen_group, display = display.none)
int di_len          = input.int(defval = 14, title = "      DI Period", minval = 1, group = gen_group, display = display.none)

string dvol_header  = input.string(defval = '', title = "DELTA VOLUME                                                                                     ", inline = 'dvol', group = gen_group, display = display.none)
int dvol_len        = input.int(defval = 50, title = "      Period", minval = 1, group = gen_group, display = display.none)

// // Volatility
float voli_atr = 3 * ta.atr(atr_len)
float voli_sma_atr = ta.sma(voli_atr, atr_smoothing)
float voli_std_atr = 2 * ta.stdev(voli_atr, atr_smoothing)

float voli_top = voli_sma_atr + voli_std_atr
float voli_bot = voli_sma_atr - voli_std_atr

float voli_atr_range = voli_top - voli_bot
float voli_dev = voli_atr_range != 0 ? (voli_atr - voli_bot) / voli_atr_range : 0.5

float voli_index = 40 * voli_dev + 30
voli_index := clamp(voli_index, 0, 100)

//RSI
float rsi_src = get_source(rsi_src_type) 
float rsi = ta.rsi(rsi_src, rsi_len)

// MACD
[macd_line, macd_signal, macd_histogram] = ta.macd(close, macd_fast_len, macd_slow_len, macd_len)

// DMI
[di_plus, di_minus, adx] = ta.dmi(di_len, dmi_smoothing)

// Delta Volume
float db_dvol = close > open ? volume : close < open ? -volume : 0

float db_dvol_max = math.max(math.abs(ta.highest(db_dvol, dvol_len)), math.abs(ta.lowest(db_dvol, dvol_len)))
float db_dvol_normalized = db_dvol_max != 0 ? db_dvol / db_dvol_max : 0

// === Dashboard ===
bool db_show            = input.bool(defval = true, title = 'DASHBOARD', group = db_group)
string db_loc           = input.string(defval = "Bottom Right", title = "      Location", options = ["Top Right", "Bottom Right", "Bottom Left", "Middle Left"], group = db_group, display = display.none)
string db_size          = input.string(defval = "Small", title = "      Size", options = ["Tiny", "Small", "Normal", "Large"], group = db_group, display = display.none)
bool db_show_tech       = input.bool(defval = true, title = '--Technicals', group = db_group)
bool db_show_tf         = input.bool(defval = true, title = '--Timeframe Trends', group = db_group)
string db_tf_dis_type   = input.string(defval = "▲/▼", title = "      Display Type", options = ["▲/▼", "↑/↓", "UP/DOWN","Bullish/Bearish"], group = db_group, display = display.none)
int db_tf_length        = input.int(defval = 3, title="      Lookback Period", minval = 1, group = db_group, display = display.none)
bool db_show_sess       = input.bool(defval = true, title = '--Sessions', group = db_group)


method get_tf_trend_text(string tf) =>
    int trend = get_tf_trend(tf, db_tf_length)
    array<string> texts = str.split(db_tf_dis_type, '/')
    _text = trend == 1 ? texts.get(0) : trend == -1 ? texts.get(1) : "-"
    _color = (trend == 1 ? color.green : (trend == -1 ? color.red : color.white))
    [ _text, _color]


method plot_cell(table _table, int col, int row, string data, color text_color = #FFFFFF, string text_align = text.align_center, color bg_color = na) => 
    _table.cell(col,row,data,text_color = text_color, text_size = get_size(db_size), text_halign = text_align, bgcolor = bg_color)

method get_table_len(bool field1, bool field2, bool field3) =>
    int active_count = (field1 ? 1 : 0) + (field2 ? 1 : 0) + (field3 ? 1 : 0)
    active_count == 1 ? 1 : active_count == 2 ? 4 : active_count == 3 ? 7 : 0
        
method get_session_info(string session_time) =>
    bool in_session = not na(time(timeframe.period, session_time, "UTC")) and timeframe.isintraday
    if in_session
        ['Active', color.green]
    else
        ['Inactive', color.red]
        
if db_show
    if barstate.islast
        string db_table_size = get_size(db_size)
        table _table = table.new(get_position(db_loc), 20, 20 , bgcolor = #11172565 , border_color = #373a4600 , border_width = 1 , frame_color = #000000 , frame_width = 1)
        
        float hist_diff = macd_histogram - macd_histogram[1]

        color volatility_color = voli_index < 35 ? color.green : voli_index < 50 ? color.yellow : voli_index < 70 ? color.orange : color.red
        color rsi_color = rsi < 30 ? color.green : rsi > 70 ? color.red : rsi > 50 ? color.orange : color.yellow
        color histogram_color = macd_histogram > 0 and hist_diff > 0 ? color.green : macd_histogram > 0 and hist_diff < 0 ? color.orange : macd_histogram < 0 and hist_diff < 0 ? color.red : macd_histogram < 0 and hist_diff > 0 ? color.yellow : color.white
        color dvol_color = db_dvol_normalized > 0.5 ? color.green : db_dvol_normalized > 0.2 ? color.orange : db_dvol_normalized < -0.5 ? color.red : db_dvol_normalized < -0.2 ? color.orange : color.yellow
        color dmi_color = adx > 25 and di_plus > di_minus ? color.green : adx > 25 and di_minus > di_plus ? color.red : adx > 20 ? color.orange : color.yellow

        // Dashboard title
        int table_len = get_table_len(db_show_tech, db_show_tf, db_show_sess)
        _table.plot_cell(0, 0, 'Dashboard', bg_color = #18233a)

        if table_len > 0
            _table.merge_cells(0, 0, table_len, 0)
        else
            _table.plot_cell(0, 1, 'No Data')

        // // Technicals
        if db_show_tech
            int pivot_col = 0
            int pivot_row = 1
            _table.plot_cell(pivot_col, 1, 'Technicals', text_color = #b0b2b9)
            _table.merge_cells(pivot_col, pivot_row, pivot_col + 1, pivot_row)

            _table.plot_cell(pivot_col, pivot_row + 1, 'Volatility Index', text_align = text.align_left)
            _table.plot_cell(pivot_col + 1, pivot_row + 1, str.tostring(voli_index,"#.##"), text_color = volatility_color)

            _table.plot_cell(pivot_col, pivot_row + 2, 'RSI', text_align = text.align_left)
            _table.plot_cell(pivot_col + 1, pivot_row + 2,  str.tostring(rsi,"#.##"), text_color = rsi_color)

            _table.plot_cell(pivot_col, pivot_row + 3, 'MACD Histogram', text_align = text.align_left)
            _table.plot_cell(pivot_col + 1, pivot_row + 3,  str.tostring(macd_histogram,"#.##"), text_color = histogram_color)

            _table.plot_cell(pivot_col, pivot_row + 4, 'DMI', text_align = text.align_left)
            _table.plot_cell(pivot_col + 1, pivot_row + 4,  str.tostring(adx,"#.##"), text_color = dmi_color)

            _table.plot_cell(pivot_col, pivot_row + 5, 'Delta Volume', text_align = text.align_left)
            _table.plot_cell(pivot_col + 1, pivot_row + 5,  str.tostring(db_dvol_normalized,"#.##"), text_color = dvol_color)

        // // Timeframe Trends
        if db_show_tf
            [m1_text, m1_color]   = get_tf_trend_text("1")
            [m3_text, m3_color]   = get_tf_trend_text("3")
            [m5_text, m5_color]   = get_tf_trend_text("5")
            [m15_text, m15_color] = get_tf_trend_text("15")
            [m30_text, m30_color] = get_tf_trend_text("30")
            [h1_text, h1_color]   = get_tf_trend_text("60")
            [h2_text, h2_color]   = get_tf_trend_text("120")
            [h4_text, h4_color]   = get_tf_trend_text("240")
            [h12_text, h12_color] = get_tf_trend_text("720")
            [d1_text, d1_color]   = get_tf_trend_text("D")
            
            int pivot_col = db_show_tech ? 3 : 0
            int pivot_row = 1

            _table.plot_cell(pivot_col, pivot_row, 'Timeframe', text_color = #b0b2b9)
            _table.plot_cell(pivot_col + 1, pivot_row, 'Trend', text_color = #b0b2b9)

            _table.plot_cell(pivot_col, 2, "1 Minute")
            _table.plot_cell(pivot_col + 1, pivot_row + 1, m1_text, text_color = m1_color)

            _table.plot_cell(pivot_col, 3, "3 Minute")
            _table.plot_cell(pivot_col + 1, pivot_row + 2, m3_text, text_color = m3_color)

            _table.plot_cell(pivot_col, 4, "5 Minute")
            _table.plot_cell(pivot_col + 1, pivot_row + 3, m5_text, text_color = m5_color)

            _table.plot_cell(pivot_col, 5, "15 Minute")
            _table.plot_cell(pivot_col + 1, pivot_row + 4, m15_text, text_color = m15_color)

            _table.plot_cell(pivot_col, 6, "30 Minute")
            _table.plot_cell(pivot_col + 1, pivot_row + 5, m30_text, text_color = m30_color)

            _table.plot_cell(pivot_col, 7, "1 Hour")
            _table.plot_cell(pivot_col + 1, pivot_row + 6, h1_text, text_color = h1_color)

            _table.plot_cell(pivot_col, 8, "2 Hour")
            _table.plot_cell(pivot_col + 1, pivot_row + 7, h2_text, text_color = h2_color)

            _table.plot_cell(pivot_col, 9, "4 Hour")
            _table.plot_cell(pivot_col + 1, pivot_row + 8, h4_text, text_color = h4_color)

            _table.plot_cell(pivot_col, 10, "12 Hour")
            _table.plot_cell(pivot_col + 1, pivot_row + 9, h12_text, text_color = h12_color)

            _table.plot_cell(pivot_col, 11, "Daily")
            _table.plot_cell(pivot_col + 1, pivot_row + 10, d1_text, text_color = d1_color)
        
        // // Sessions
        if db_show_sess
            string tokyo_session = '0000-0900:123456'
            string london_session = '0700-1600:123456'
            string newyork_session = '1300-2200:123456'
            string sydney_session = '2100-0600:123456'

            [tokyo_status, tokyo_color] = get_session_info(tokyo_session)
            [london_status, london_color] = get_session_info(london_session)
            [newyork_status, newyork_color] = get_session_info(newyork_session)
            [sydney_status, sydney_color] = get_session_info(sydney_session)

            int pivot_col = db_show_tech ? db_show_tf ? 6 : 3 : db_show_tf ? 3 : 0
            int pivot_row = 1
            _table.plot_cell(pivot_col, pivot_row, 'Session', text_color = #b0b2b9)
            _table.plot_cell(pivot_col + 1, pivot_row, 'Status', text_color = #b0b2b9)

            _table.plot_cell(pivot_col, pivot_row + 1, 'Tokyo', text_align = text.align_left)
            _table.plot_cell(pivot_col + 1, pivot_row + 1, tokyo_status, text_color = tokyo_color)

            _table.plot_cell(pivot_col, pivot_row + 2, 'London', text_align = text.align_left)
            _table.plot_cell(pivot_col + 1, pivot_row + 2, london_status, text_color = london_color)

            _table.plot_cell(pivot_col, pivot_row + 3, 'New York', text_align = text.align_left)
            _table.plot_cell(pivot_col + 1, pivot_row + 3, newyork_status, text_color = newyork_color)

            _table.plot_cell(pivot_col, pivot_row + 4, 'Sydney', text_align = text.align_left)
            _table.plot_cell(pivot_col + 1, pivot_row + 4, sydney_status, text_color = sydney_color)



// === Bolinger Bands ===
bool bb_show            = input.bool(defval = true, title = 'BOLINGER BANDS', group = bb_group, display = display.none)
int bb_length           = input.int(defval = 20, title="      Length", group = bb_group, display = display.none)
float bb_mult           = input.float(defval = 2.0, title="      Multiplier", group = bb_group, display = display.none)
color bb_upper_color    = input.color(defval = color.red, title="      Upper Band Color  ", inline = 'bb_upper', group = bb_group)
color bb_upper_gradient = input.color(defval = #000000, title=" Gradient  ", inline = 'bb_upper', group = bb_group)
color bb_lower_color    = input.color(defval = color.green, title="      Lower Band Color  ", inline = 'bb_lower', group = bb_group)
color bb_lower_gradient = input.color(defval = #000000, title=" Gradient  ", inline = 'bb_lower', group = bb_group)
color bb_basis_color    = input.color(defval = color.yellow, title="      Basis Color", group = bb_group)
float bb_opacity        = input.float(defval = 100, title="      Opacity", minval = 0, maxval = 100, group = bb_group, display = display.none)
string bb_style         = input.string(defval = "2", title = "      Style", options = ["1", "2", "3", "4"], group = bb_group, display = display.none)

float bb_upper = na
float bb_lower = na
float bb_basis = na
float bb_upper_min = na
float bb_lower_min = na
float bb_basis_min = na
float bb_upper_max = na
float bb_lower_max = na
float bb_basis_max = na
float bb_transparency = 100 - bb_opacity

if bb_show
    bb_basis := ta.sma(close, bb_length)
    bb_dev = bb_mult * ta.stdev(close, bb_length)
    bb_upper := bb_basis + bb_dev
    bb_lower := bb_basis - bb_dev

    bb_basis_min := ta.sma(close, int(bb_length * 0.75))
    bb_dev_min = (bb_mult * 0.75) * ta.stdev(close, int(bb_length * 0.75))
    bb_upper_min := bb_basis_min + bb_dev_min
    bb_lower_min := bb_basis_min - bb_dev_min

    bb_basis_max := ta.sma(close, int(bb_length / 0.75))
    bb_dev_max = (bb_mult / 0.75) * ta.stdev(close, int(bb_length / 0.75))
    bb_upper_max := bb_basis_max + bb_dev_max
    bb_lower_max := bb_basis_max - bb_dev_max

var bb_upper_plot = plot(bb_upper, title="BB Upper", color=color.new(bb_upper_color, bb_transparency), linewidth=2, editable = false, display = display.pane)
var bb_basis_plot = plot(bb_basis, title="BB Basis", color=color.new(bb_basis_color, bb_transparency), linewidth=2, editable = false, display = display.pane)
var bb_lower_plot = plot(bb_lower, title="BB Lower", color=color.new(bb_lower_color, bb_transparency), linewidth=2, editable = false, display = display.pane)

var bb_upper_min_plot = plot(bb_upper_min, editable = false, display = display.none)
var bb_lower_min_plot = plot(bb_lower_min, editable = false, display = display.none)

var bb_upper_max_plot = plot(bb_upper_max, editable = false, display = display.none)
var bb_lower_max_plot = plot(bb_lower_max, editable = false, display = display.none)

fill(bb_upper_plot, bb_upper_min_plot, bb_upper, bb_upper_min, color.new(bb_upper_color, bb_transparency), color.new(bb_upper_gradient, 100), editable=false, display = bb_style == '2' or bb_style == '4' ? display.all : display.none)
fill(bb_lower_plot, bb_lower_min_plot, bb_lower, bb_lower_min, color.new(bb_lower_color, bb_transparency), color.new(bb_lower_gradient, 100), editable=false, display = bb_style == '2' or bb_style == '4' ? display.all : display.none)

fill(bb_upper_plot, bb_upper_max_plot, bb_upper, bb_upper_max, color.new(bb_upper_color, bb_transparency), color.new(bb_upper_gradient, 100), editable=false, display = bb_style == '3' or bb_style == '4' ? display.all : display.none)
fill(bb_lower_plot, bb_lower_max_plot, bb_lower, bb_lower_max, color.new(bb_lower_color, bb_transparency), color.new(bb_lower_gradient, 100), editable=false, display = bb_style == '3' or bb_style == '4' ? display.all : display.none)

// === Exponential Moving Average ===
bool ema_show           = input.bool(defval = false, title = 'EMA', group = ema_group)
int ema_len             = input.int(defval = 200, title="      Length", group = ema_group, display = display.none)
int ema_range           = input.int(defval = 50, title="      Range", group = ema_group, display = display.none)
color ema_up_color      = input.color(defval = color.blue, title="      Up Trend Color", group = ema_group)
color ema_down_color    = input.color(defval = color.orange, title="      Down Trend Color", group = ema_group)
string ema_style        = input.string(defval = "1", title = "      Style", options = ["1", "2"], group = ema_group, display = display.none)

float ema_upper = na
float ema_lower = na
float ema_basis = na
color ema_trend_color = na
int ema_fill_alpha_upper = na
int ema_fill_alpha_lower = na

if ema_show
    ema_upper := ta.ema(close, ema_len + math.min(ema_len, ema_range))
    ema_lower := ta.ema(close, ema_len - math.min(ema_len, ema_range))
    ema_basis := ta.ema(close, ema_len)

    ema_trend_color := ema_lower > ema_upper ? ema_up_color : ema_down_color

    float dist_upper = math.abs(ema_upper - ema_basis)
    float dist_lower = math.abs(ema_lower - ema_basis)
    float max_dist = math.max(dist_upper, dist_lower)
    ema_fill_alpha_upper := int(255 * (dist_upper / (max_dist == 0 ? 1 : max_dist)))
    ema_fill_alpha_lower := int(255 * (dist_lower / (max_dist == 0 ? 1 : max_dist)))

var ema_upper_plot = plot(ema_upper, editable = false, display = display.none)
var ema_lower_plot = plot(ema_lower, editable = false, display = display.none)
var ema_basis_plot = plot(ema_basis, editable = false, display = display.none)

fill(ema_upper_plot, ema_lower_plot, ema_upper, ema_lower, color.new(ema_trend_color, 255 - math.max(ema_fill_alpha_upper, ema_fill_alpha_lower)), color.new(ema_trend_color, 100), editable = false, display = ema_style == '1' ? display.all : display.none )
fill(ema_upper_plot, ema_basis_plot, ema_upper, ema_basis, color.new(ema_trend_color, 255 - ema_fill_alpha_upper), color.new(ema_trend_color, 100), editable=false, display = ema_style == '2' ? display.all : display.none)
fill(ema_lower_plot, ema_basis_plot, ema_lower, ema_basis, color.new(ema_trend_color, 255 - ema_fill_alpha_lower), color.new(ema_trend_color, 100), editable=false, display = ema_style == '2' ? display.all : display.none)
