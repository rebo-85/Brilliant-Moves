//@version=6
indicator("Indicator Collection [ReBo]", overlay=true)

// Internal Functions
supertrend(source, factor, atr_length) =>
    atr = ta.atr(atr_length)
    upper_band = source + factor * atr
    lower_band = source - factor * atr
    prev_lower_band = nz(lower_band[1])
    prev_upper_band = nz(upper_band[1])
    lower_band := lower_band > prev_lower_band or close[1] < prev_lower_band ? lower_band : prev_lower_band
    upper_band := upper_band < prev_upper_band or close[1] > prev_upper_band ? upper_band : prev_upper_band
    int direction = na
    float super_trend = na
    prev_super_trend = super_trend[1]
    if na(atr[1])
        direction := 2
    else if prev_super_trend == prev_upper_band
        direction := close > upper_band ? -1 : 1
    else
        direction := close < lower_band ? 1 : -1
    super_trend := direction == -1 ? lower_band : upper_band
    [super_trend, direction]

    
method get_position(string position) =>
    switch position
        'Bottom Center'   => position.bottom_center
        'Bottom Left'   => position.bottom_left
        'Bottom Right'  => position.bottom_right
        'Middle Center' => position.middle_center
        'Middle Left' => position.middle_left
        'Middle Right' => position.middle_right
        'Top Center' => position.top_center
        'Top Left' => position.top_left
        'Top Right' => position.top_right

method get_size(string size) =>
    switch size
        'Auto'   => size.auto
        'Tiny'   => size.tiny
        'Small'  => size.small
        'Normal' => size.normal
        'Large' => size.large
        'Huge' => size.huge

method get_rsi_source(string type) =>
    switch type
        "Open"   => open
        "High"   => high
        "Low"    => low
        "HL2"    => (high + low) / 2
        "HLC3"   => (high + low + close) / 3
        "OHLC4"  => (open + high + low + close) / 4
        "Volume" => volume
        => close  

method clamp(float val, float min_val, float max_val) =>
    val > max_val ? max_val : val < min_val ? min_val : val

// === Bollinger Bands ===
bb_group    = 'Bollinger Bands'
bb_show     = input.bool(true, title = 'Enable', group = bb_group, display = display.none)
bb_length   = input.int(20, title="Length", group = bb_group, display = display.none)
bb_mult     = input.float(2.0, title="Multiplier", group = bb_group, display = display.none)

var float bb_upper = na
var float bb_lower = na
var float bb_basis = na

if bb_show
    bb_basis := ta.sma(close, bb_length)
    bb_dev = bb_mult * ta.stdev(close, bb_length)
    bb_upper := bb_basis + bb_dev
    bb_lower := bb_basis - bb_dev


plot(bb_upper, title="BB Upper", color=color.rgb(255, 255, 255), linewidth=1, display = display.pane)
plot(bb_lower, title="BB Lower", color=color.rgb(255, 255, 255), linewidth=1, display = display.pane)
plot(bb_basis, title="BB Basis", color=color.rgb(0, 0, 0), linewidth=1, display = display.pane)
// === Dashboard ===
string db_group         = 'Dashboard'
bool db_show            = input.bool(defval = true, title = 'Enable', group = db_group)
string db_loc           = input.string(defval = "Bottom Right", title = "Dashboard Location", options = ["Top Right", "Bottom Right", "Bottom Left", "Middle Left"],group = db_group, display = display.none)
string db_size          = input.string(defval = "Small", title = "Dashboard Size", options = ["Tiny","Small","Normal","Large"],group = db_group, display = display.none)
int db_fast_len         = input.int(defval = 12, title="MACD Fast Length", group = db_group, display = display.none)
int db_slow_len         = input.int(defval = 26, title="MACD Slow Length", group = db_group, display = display.none)
int db_macd_smoothing   = input.int(defval = 9, title="MACD Signal Smoothing", group = db_group, display = display.none)
int db_voli_len         = input.int(defval = 10, title="Volatility Lookback", group = db_group, display = display.none)
int db_atr_smoothing    = input.int(defval = 20, title="Volatility Smoothing", group = db_group, display = display.none)
string db_rsi_src_type  = input.string(defval = "Close", title = "RSI Source", options = ["Close", "Open", "High", "Low", "HL2", "HLC3", "OHLC4", "Volume"], group = db_group, display = display.none)
int db_rsi_length       = input.int(defval = 14, title="RSI Length", group = db_group, display = display.none)
int db_dmi_smoothing    = input.int(defval = 14, title="DMI Smoothing Period", group = db_group, display = display.none)
int db_di_length        = input.int(defval = 14, title="DMI DI Period", group = db_group, display = display.none)
int db_dvol_length      = input.int(defval = 50, title="Delta Volume Period", group = db_group, display = display.none)
int db_tf_length        = input.int(defval = 5, title="TF Lookback", group = db_group, display = display.none)
bool db_show_tf         = input.bool(defval = true, title = 'Timeframe Trends', group = db_group)

// Volatility
float db_raw_atr = 3 * ta.atr(db_voli_len)
float db_sma_atr = ta.sma(db_raw_atr, db_atr_smoothing)
float db_std_atr = 2 * ta.stdev(db_raw_atr, db_atr_smoothing)

float db_top_band = db_sma_atr + db_std_atr
float db_bot_band = db_sma_atr - db_std_atr

float db_atr_range = db_top_band - db_bot_band
float db_dev = db_atr_range != 0 ? (db_raw_atr - db_bot_band) / db_atr_range : 0.5

float db_volatility_index = 40 * db_dev + 30
db_volatility_index := clamp(db_volatility_index, 0, 100)

//RSI
float db_rsi_source = get_rsi_source(db_rsi_src_type) 
float db_rsi = ta.rsi(db_rsi_source, db_rsi_length)

// MACD
[db_macd_line, db_macd_signal, db_histogram] = ta.macd(close, db_fast_len, db_slow_len, db_macd_smoothing)

// DMI
[db_di_plus, db_di_minus, db_adx] = ta.dmi(db_di_length, db_dmi_smoothing)

// Delta Volume
float db_dvol = close > open ? volume : close < open ? -volume : 0

float db_dvol_max = math.max(math.abs(ta.highest(db_dvol, db_dvol_length)), math.abs(ta.lowest(db_dvol, db_dvol_length)))
float db_dvol_normalized = db_dvol_max != 0 ? db_dvol / db_dvol_max : 0


get_tf_trend(tf) =>
    open_ = request.security(syminfo.tickerid, tf, open[db_tf_length - 1], lookahead=barmerge.lookahead_off)
    close_ = request.security(syminfo.tickerid, tf, close, lookahead=barmerge.lookahead_off)
    trend_up = close_ > open_
    trend_down = close_ < open_
    trend = trend_up ? 1 : trend_down ? -1 : 0
    symbol = trend == 1 ? "▲" : trend == -1 ? "▼" : "-"
    color_ = (trend == 1 ? color.green : (trend == -1 ? color.red : color.gray))
    [ symbol, color_]

[db_m1, db_m1_color]   = get_tf_trend("1")
[db_m3, db_m3_color]   = get_tf_trend("3")
[db_m5, db_m5_color]   = get_tf_trend("5")
[db_m15, db_m15_color] = get_tf_trend("15")
[db_m30, db_m30_color] = get_tf_trend("30")
[db_h1, db_h1_color]   = get_tf_trend("60")
[db_h2, db_h2_color]   = get_tf_trend("120")
[db_h4, db_h4_color]   = get_tf_trend("240")
[db_h12, db_h12_color] = get_tf_trend("720")
[db_d1, db_d1_color]   = get_tf_trend("D")


method plot_cell(table _table, int col, int row, string data, color text_color = #FFFFFF, string text_align = text.align_center, color bg_color = na) => 
    _table.cell(col,row,data,text_color = text_color, text_size = get_size(db_size), text_halign = text_align, bgcolor = bg_color)

if db_show
    if barstate.islast
        string db_table_size = get_size(db_size)
        table db_table = table.new(get_position(db_loc), 18, 20 , bgcolor = #11172565 , border_color = #373a4600 , border_width = 1 , frame_color = #000000 , frame_width = 1)
        
        float hist_diff = db_histogram - db_histogram[1]

        color volatility_color = db_volatility_index < 35 ? color.green : db_volatility_index < 50 ? color.yellow : db_volatility_index < 70 ? color.orange : color.red
        color rsi_color = db_rsi < 30 ? color.green : db_rsi > 70 ? color.red : db_rsi > 50 ? color.orange : color.yellow
        color histogram_color = db_histogram > 0 and hist_diff > 0 ? color.green : db_histogram > 0 and hist_diff < 0 ? color.orange : db_histogram < 0 and hist_diff < 0 ? color.red : db_histogram < 0 and hist_diff > 0 ? color.yellow : color.white
        color dvol_color = db_dvol_normalized > 0.5 ? color.green : db_dvol_normalized > 0.2 ? color.orange : db_dvol_normalized < -0.5 ? color.red : db_dvol_normalized < -0.2 ? color.orange : color.yellow
        color dmi_color = db_adx > 25 and db_di_plus > db_di_minus ? color.green : db_adx > 25 and db_di_minus > db_di_plus ? color.red : db_adx > 20 ? color.orange : color.yellow

        // Dashboard title
        db_table.plot_cell(0, 0, 'Dashboard', bg_color = #18233a)
        table.merge_cells(db_table, 0, 0, db_show_tf ? 5 : 1, 0)

        // // Technicals
        db_table.plot_cell(0, 1, 'Technicals', text_color = #b0b2b9)
        table.merge_cells(db_table, 0, 1, 1, 1)

        db_table.plot_cell(0, 2, 'Volatility Index', text_align = text.align_left)
        db_table.plot_cell(1, 2, str.tostring(db_volatility_index,"#.##"), text_color = volatility_color)

        db_table.plot_cell(0, 3, 'RSI', text_align = text.align_left)
        db_table.plot_cell(1, 3,  str.tostring(db_rsi,"#.##"), text_color = rsi_color)

        db_table.plot_cell(0, 4, 'MACD Histogram', text_align = text.align_left)
        db_table.plot_cell(1, 4,  str.tostring(db_histogram,"#.##"), text_color = histogram_color)

        db_table.plot_cell(0, 5, 'DMI', text_align = text.align_left)
        db_table.plot_cell(1, 5,  str.tostring(db_adx,"#.##"), text_color = dmi_color)

        db_table.plot_cell(0, 6, 'Delta Volume', text_align = text.align_left)
        db_table.plot_cell(1, 6,  str.tostring(db_dvol_normalized,"#.##"), text_color = dvol_color)

        // // Timeframe Trends
        if db_show_tf
            db_table.plot_cell(4, 1, 'Timeframe', text_color = #b0b2b9)
            db_table.plot_cell(5, 1, 'Trend', text_color = #b0b2b9)

            db_table.plot_cell(4, 2, "1 Minute")
            db_table.plot_cell(5, 2, db_m1, text_color = db_m1_color)

            db_table.plot_cell(4, 3, "3 Minute")
            db_table.plot_cell(5, 3, db_m3, text_color = db_m3_color)

            db_table.plot_cell(4, 4, "5 Minute")
            db_table.plot_cell(5, 4, db_m5, text_color = db_m5_color)

            db_table.plot_cell(4, 5, "15 Minute")
            db_table.plot_cell(5, 5, db_m15, text_color = db_m15_color)

            db_table.plot_cell(4, 6, "30 Minute")
            db_table.plot_cell(5, 6, db_m30, text_color = db_m30_color)

            db_table.plot_cell(4, 7, "1 Hour")
            db_table.plot_cell(5, 7, db_h1, text_color = db_h1_color)

            db_table.plot_cell(4, 8, "2 Hour")
            db_table.plot_cell(5, 8, db_h2, text_color = db_h2_color)

            db_table.plot_cell(4, 9, "4 Hour")
            db_table.plot_cell(5, 9, db_h4, text_color = db_h4_color)

            db_table.plot_cell(4, 10, "12 Hour")
            db_table.plot_cell(5, 10, db_h12, text_color = db_h12_color)

            db_table.plot_cell(4, 11, "Daily")
            db_table.plot_cell(5, 11, db_d1, text_color = db_d1_color)


// === EMA ===
ema_group       = 'Exponential Movement Average'
ema_show        = input.bool(false, title = 'Enable', group = ema_group)
ema_short_show  = input.bool(true, title = '', inline = 'ema_short', group = ema_group)
ema_short_len   = input.int(150, title="Short", inline = 'ema_short', group = ema_group, display = display.none)
ema_mid_show  = input.bool(true, title = '', inline = 'ema_mid', group = ema_group)
ema_mid_len     = input.int(200, title="Mid", inline = 'ema_mid', group = ema_group, display = display.none)
ema_long_show  = input.bool(true, title = '', inline = 'ema_long', group = ema_group)
ema_long_len    = input.int(250, title="Long", inline = 'ema_long', group = ema_group, display = display.none)
ema_fill_show        = input.bool(true, title = 'Fill', group=ema_group)

float ema_custom = na
float ema_short = na
float ema_mid = na
float ema_long = na
float ema_cloud_low = na
float ema_cloud_high = na

if ema_show
    ema_short  := ema_short_show ? ta.ema(close, ema_short_len) : na
    ema_mid  := ema_mid_show ? ta.ema(close, ema_mid_len) : na
    ema_long  := ema_long_show ? ta.ema(close, ema_long_len) : na

    ema_cloud_low  := ema_fill_show ? ta.ema(close, ema_short_len) : na
    ema_cloud_high  := ema_fill_show ? ta.ema(close, ema_long_len) : na

plot(ema_short, title="EMA Short", color=color.green, linewidth=2, display = display.pane)
plot(ema_mid, title="EMA Mid", color=color.yellow, linewidth=2, display = display.pane)
plot(ema_long, title="EMA Long", color=color.red, linewidth=2, display = display.pane)

ema_cloud_low_plot = plot(ema_cloud_low, editable=false, display = display.none)
ema_cloud_high_plot = plot(ema_cloud_high, editable=false, display = display.none)
fill(ema_cloud_low_plot, ema_cloud_high_plot, ema_cloud_low > ema_cloud_high ? color.new(color.green, 70) : ema_cloud_low < ema_cloud_high ? color.new(color.red, 70) : na, editable = false)

// Entry Confirmation Indicator
ec_group        = 'Entry Confirmation Indicator'
ec_show         = input.bool(false, title = 'Enable', group = ec_group)
ec_sensitivity  = input.float(2.75, title="Sensitivity", group = ec_group, display = display.none)
ec_atr          = input.int(10, title="ATR Period", group = ec_group, display = display.none)
ec_heikin_ashi  = input.bool(false, title="Use Heikin Ashi Candles", group = ec_group)

var bool ec_buy_signal = false
var bool ec_sell_signal = false
var bool ec_buy_bar = false
var bool ec_sell_bar = false

if ec_show
    atr = ta.atr(ec_atr)
    n_loss = ec_sensitivity * atr

    price = ec_heikin_ashi ? request.security(ticker.heikinashi(syminfo.tickerid), timeframe.period, close, barmerge.gaps_off) : close

    atr_trailing_stop = 0.0
    atr_trailing_stop := if price > nz(atr_trailing_stop[1], 0) and price[1] > nz(atr_trailing_stop[1], 0)
        math.max(nz(atr_trailing_stop[1]), price - n_loss)
    else if price < nz(atr_trailing_stop[1], 0) and price[1] < nz(atr_trailing_stop[1], 0)
        math.min(nz(atr_trailing_stop[1]), price + n_loss)
    else if price > nz(atr_trailing_stop[1], 0)
        price - n_loss
    else
        price + n_loss

    pos = 0
    pos := if price[1] < nz(atr_trailing_stop[1], 0) and price > nz(atr_trailing_stop[1], 0)
        1
    else if price[1] > nz(atr_trailing_stop[1], 0) and price < nz(atr_trailing_stop[1], 0)
        -1
    else
        nz(pos[1], 0)

    plot_color = pos == -1 ? color.red : pos == 1 ? color.green : color.blue

    ema = ta.ema(price, 1)
    above = ta.crossover(ema, atr_trailing_stop)
    below = ta.crossover(atr_trailing_stop, ema)

    ec_buy_signal := price > atr_trailing_stop and above
    ec_sell_signal := price < atr_trailing_stop and below

    ec_buy_bar := price > atr_trailing_stop
    ec_sell_bar := price < atr_trailing_stop


plotshape(ec_buy_signal, title="buy", text="buy", style=shape.labelup, location=location.belowbar, color=color.green, textcolor=color.white, size=size.tiny, display = display.pane)
plotshape(ec_sell_signal, title="sell", text="sell", style=shape.labeldown, location=location.abovebar, color=color.red, textcolor=color.white, size=size.tiny, display = display.pane)

barcolor(ec_buy_bar ? color.green : na)
barcolor(ec_sell_bar ? color.red : na)

alertcondition(ec_buy_signal, "BUY", "BUY")
alertcondition(ec_sell_signal, "SELL", "SELL")

// Entry Suggestion
es_group        = "Entry Suggestion"
es_show         = input.bool(false, "Enable", group=es_group)
es_strength     = input.float(1,"Strength" ,group=es_group,display = display.none)
es_sma_length   = input.int(13, 'SMA Length', group=es_group, display=display.none)
es_ema_length   = input.int(200, 'EMA Length', group=es_group, display=display.none)
es_atr_length = input.int(14, 'ATR length', group=es_group, display=display.none)
es_atr_mult = input.float(2.2, 'ATR Multiplier', group=es_group, display=display.none)
es_factor       = input.int(11, 'Factor', group=es_group, display=display.none)
es_sensitivity  = input.float(2.5, 'Sensitivity', group=es_group, display=display.none)

[supertrend_val, direction] = supertrend(open, es_sensitivity, es_factor)
es_sma = ta.sma(close, es_sma_length)
es_is_bullish = ta.crossover(close, supertrend_val) and close >= es_sma
es_is_bearish = ta.crossunder(close, supertrend_val) and close <= es_sma

es_use_percent_trailing_sl  = false
es_percent_trailing_sl      = 1.0
es_tp1_show                 = true
es_tp2_show                 = true
es_tp3_show                 = true
es_show_labels              = true

mult_tp1 = es_strength
mult_tp2 = es_strength * 2
mult_tp3 = es_strength * 3

none = close > 0
es_bullish_count = ta.barssince(es_is_bullish)
es_bearish_count = ta.barssince(es_is_bearish)
es_trigger = nz(es_bullish_count, bar_index) < nz(es_bearish_count, bar_index) ? 1 : 0
es_atr = es_use_percent_trailing_sl ? ((es_trigger != 0 ? low : high) * (es_percent_trailing_sl / 100.0)) : ta.atr(es_atr_length) * es_atr_mult
es_atr_stop = (es_trigger != 0) ? (low - es_atr) : (high + es_atr)

es_last_trade(source) => ta.valuewhen(es_is_bullish or es_is_bearish, source, 0)
es_entry_y = es_last_trade(close)
es_stop_y = es_last_trade(es_atr_stop)
es_tp1_y = (es_entry_y-es_last_trade(es_atr_stop))*mult_tp1 + es_entry_y
es_tp2_y = (es_entry_y-es_last_trade(es_atr_stop))*mult_tp2 + es_entry_y
es_tp3_y = (es_entry_y-es_last_trade(es_atr_stop))*mult_tp3 + es_entry_y
es_last_trade_bar_index = ta.valuewhen(es_is_bullish or es_is_bearish, bar_index, 0)

es_create_label(condition, y, txt, color) =>
    var label last_label = na
    if es_show and condition and bar_index == es_last_trade_bar_index
        label.delete(last_label)
        last_label := label.new(bar_index, y, txt, xloc.bar_index, yloc.price, color, label.style_label_left, color.white, size.normal)
    else
        na

es_create_line(condition, y, color, style) =>
    line = es_show and condition ? line.new(bar_index - ((es_trigger != 0) ? es_bullish_count : es_bearish_count), y, bar_index + 1, y, xloc.bar_index, extend.none, color, style) : na
    line.delete(line[1])
es_create_label(none, es_entry_y, "Entry : " + str.tostring(math.round_to_mintick(es_entry_y)), color.orange)
es_create_label(none, es_stop_y , "Stop loss : " + str.tostring(math.round_to_mintick(es_atr_stop)), color.red)
es_create_label(es_tp1_show and mult_tp1 != 0, es_tp1_y, "TP 1 : " + str.tostring(math.round_to_mintick(es_tp1_y)), color.green)
es_create_label(es_tp2_show and mult_tp2 != 0, es_tp2_y, "TP 2 : " + str.tostring(math.round_to_mintick(es_tp2_y)), color.green)
es_create_label(es_tp3_show and mult_tp3 != 0, es_tp3_y, "TP 3 : " + str.tostring(math.round_to_mintick(es_tp3_y)), color.green)

es_create_line(none, es_entry_y, color.orange, line.style_dashed)
es_create_line(none, es_stop_y , color.red   , line.style_solid )
es_create_line(es_tp1_show and mult_tp1 != 0, es_tp1_y, color.green, line.style_dotted)
es_create_line(es_tp2_show and mult_tp2 != 0, es_tp2_y, color.green, line.style_dotted)
es_create_line(es_tp3_show and mult_tp3 != 0, es_tp3_y, color.green, line.style_dotted)

// === Market Sessions Indicator ===
ms_group = 'Market Sessions Indicator'
ms_border_width = 1
ms_border_style = line.style_dashed

ms_show = input.bool(false, title = "Enable", group = ms_group)

ms_tokyo_show      = input.bool(true, '', inline='ms_tokyo', group=ms_group)
ms_tokyo_label     = input.string('Tokyo', '', inline='ms_tokyo', group=ms_group, display = display.none)
ms_tokyo_color     = input.color(color.rgb(255, 153, 0, 95), '' , inline='ms_tokyo', group=ms_group, display = display.none)
ms_tokyo_time      = input.session(defval="0000-0900", title='     ', inline='ms_tokyo2', group=ms_group, display = display.none)

ms_london_show     = input.bool(true, '', inline='ms_london', group=ms_group)
ms_london_label    = input.string('London', '', inline='ms_london', group=ms_group, display = display.none)
ms_london_color    = input.color(color.rgb(76, 175, 79, 90), '' , inline='ms_london', group=ms_group, display = display.none)
ms_london_time     = input.session(defval="0700-1600", title='     ', inline='ms_london2', group=ms_group, display = display.none)

ms_newyork_show    = input.bool(true, title='', inline='ms_newyork', group=ms_group)
ms_newyork_label   = input.string('New York', '', inline='ms_newyork', group=ms_group, display = display.none)
ms_newyork_color   = input.color(color.rgb(33, 149, 243, 90), '', inline='ms_newyork', group=ms_group, display = display.none)
ms_newyork_time    = input.session(defval="1300-2200", title='     ', inline='ms_newyork2', group=ms_group, display = display.none)

ms_sydney_show     = input.bool(false, title='', inline='ms_sydney', group=ms_group)
ms_sydney_label    = input.string('Sydney', '', inline='ms_sydney', group=ms_group, display = display.none)
ms_sydney_color    = input.color(color.rgb(164, 97, 187, 90), '', inline='ms_sydney', group=ms_group, display = display.none)
ms_sydney_time     = input.session(defval="2100-0600", title='     ', inline='ms_sydney2', group=ms_group, display = display.none)

ms_merge_sessions  = input.bool(false, 'Merge Overlaps', group = ms_group)
ms_hide_weekends   = input.bool(true, 'Hide Weekends', group = ms_group)
ms_label_size      = input.string('Normal', 'Label Size', options = ['Auto', 'Tiny', 'Small', 'Normal', 'Large', 'Huge'], group=ms_group, display = display.none)
ms_display_type    = input.string('Boxes', 'Display Type', options = ['Boxes', 'Zones','Timeline'], group=ms_group, display = display.none)
ms_days_back       = input.float(150, 'Lookback (Days)', group=ms_group, display = display.none, tooltip= 'This inputs defines the lookback period for plotting sessions. Eg. If it is set to 1, only the sessions of the past day will appear')


ms_get_time_range(session_time) =>
    ms_hide_weekends ? session_time+":123456" : session_time+":1234567"

        
ms_in_session(session_time) =>
    not na(time(timeframe.period, session_time, "UTC")) and timeframe.isintraday


ms_update_box(session_box, session_label_obj, session_high_price, session_low_price) =>
    box.set_top(session_box, session_high_price)
    box.set_bottom(session_box, session_low_price)
    box.set_right(session_box, bar_index + 1)
    label.set_x(session_label_obj, (box.get_left(session_box) + box.get_right(session_box)) / 2)
    label.set_y(session_label_obj, session_high_price)

var ms_tokyo_high_price     = 0.0, var ms_tokyo_low_price      = 0.0, var ms_tokyo_open_price     = 0.0, var box ms_tokyo_box       = na, var ms_tokyo_t     = 0.0, var label ms_tokyo_label_obj   = na, var line ms_tokyo_oc       = na, var string ms_tokyo_text   = str.tostring(ms_tokyo_label)
var ms_london_high_price    = 0.0, var ms_london_low_price     = 0.0, var ms_london_open_price    = 0.0, var box ms_london_box      = na, var ms_london_t    = 0.0, var label ms_london_label_obj  = na, var line ms_london_oc      = na, var string ms_london_text  = str.tostring(ms_london_label)
var ms_newyork_high_price   = 0.0, var ms_newyork_low_price    = 0.0, var ms_newyork_open_price   = 0.0, var box ms_newyork_box     = na, var ms_newyork_t   = 0.0, var label ms_newyork_label_obj = na, var line ms_newyork_oc     = na, var string ms_newyork_text = str.tostring(ms_newyork_label)
var ms_sydney_high_price    = 0.0, var ms_sydney_low_price     = 0.0, var ms_sydney_open_price    = 0.0, var box ms_sydney_box      = na, var ms_sydney_t    = 0.0, var label ms_sydney_label_obj  = na, var line ms_sydney_oc      = na, var string ms_sydney_text  = str.tostring(ms_sydney_label)
var ms_in_range = false
var ms_in_london_var = false
var ms_in_newyork_var = false
var ms_in_sydney_var = false
var ms_in_tokyo_var = false
// Creating variables for alternative Sessions Box top and bottom (used for merging sessions)
var float ms_tokyo_high_m   = 0, var float ms_tokyo_low_m    = 0, var float ms_london_high_m  = 0, var float ms_london_low_m   = 0, var float ms_newyork_high_m = 0, var float ms_newyork_low_m  = 0, var float ms_sydney_high_m  = 0, var float ms_sydney_low_m   = 0
if ms_show
    tokyo_time_range   = ms_get_time_range(ms_tokyo_time)
    london_time_range  = ms_get_time_range(ms_london_time)
    newyork_time_range = ms_get_time_range(ms_newyork_time)
    sydney_time_range  = ms_get_time_range(ms_sydney_time)


    mspd        = 24 * 60 * 60 * 1000
    last_bar_date = timestamp(year(timenow), month(timenow), dayofmonth(timenow), hour(timenow), minute(timenow), second(timenow))
    current_bar_date = timestamp(year, month, dayofmonth, hour, minute, second)
    days_left    = math.abs(math.floor((last_bar_date - current_bar_date) / mspd))
    ms_in_range     := days_left < ms_days_back

    ms_in_tokyo_var        := ms_in_session(tokyo_time_range)
    ms_tokyo_start     = ms_in_tokyo_var  and not ms_in_tokyo_var[1]
    ms_in_london_var       := ms_in_session(london_time_range)
    ms_london_start    = ms_in_london_var and not ms_in_london_var[1]
    ms_in_newyork_var      := ms_in_session(newyork_time_range)
    ms_newyork_start   = ms_in_newyork_var and not ms_in_newyork_var[1]
    ms_in_sydney_var       := ms_in_session(sydney_time_range)
    ms_sydney_start    = ms_in_sydney_var and not ms_in_sydney_var[1]

    // Settings high, low, open at the beggining of the session
    if ms_tokyo_start
        ms_tokyo_high_price   := high
        ms_tokyo_low_price    := low
        ms_tokyo_open_price   := open
    if ms_london_start
        ms_london_high_price  := high
        ms_london_low_price   := low
        ms_london_open_price  := open
    if ms_newyork_start
        ms_newyork_high_price := high
        ms_newyork_low_price  := low
        ms_newyork_open_price := open
    if ms_sydney_start
        ms_sydney_high_price  := high
        ms_sydney_low_price   := low
        ms_sydney_open_price  := open

    // Track session's max high and max low during the session
    else if ms_in_tokyo_var
        ms_tokyo_high_price   := math.max(ms_tokyo_high_price, high)
        ms_tokyo_low_price    := math.min(ms_tokyo_low_price, low)
    else if ms_in_london_var
        ms_london_high_price  := math.max(ms_london_high_price, high)
        ms_london_low_price   := math.min(ms_london_low_price, low)
    else if ms_in_newyork_var
        ms_newyork_high_price := math.max(ms_newyork_high_price, high)
        ms_newyork_low_price  := math.min(ms_newyork_low_price, low)
    else if ms_in_sydney_var
        ms_sydney_high_price  := math.max(ms_sydney_high_price, high)
        ms_sydney_low_price   := math.min(ms_sydney_low_price, low)

    // Plotting session boxes at the beginning of each session
    if ms_in_range
        if ms_tokyo_start and ms_tokyo_show
            ms_tokyo_box     := ms_display_type=='Boxes' ? box.new(left=bar_index, top=na, right=na, bottom=na, border_width=ms_border_width, bgcolor = ms_tokyo_color, border_style = ms_border_style, border_color=color.new(ms_tokyo_color, 40)) : na
            ms_tokyo_label_obj   :=  label.new(x=na, y=na, text=ms_tokyo_text, textcolor=color.new(ms_tokyo_color, 40), color=color.rgb(0,0,0,100), size=get_size(ms_label_size))
        if ms_london_start and ms_london_show
            ms_london_box    := ms_display_type=='Boxes' ? box.new(left=bar_index, top=na, right=na, bottom=na, border_width=ms_border_width, bgcolor = ms_london_color, border_style = ms_border_style, border_color=color.new(ms_london_color, 40)) : na
            ms_london_label_obj  :=  label.new(x=na, y=na, text=ms_london_text, textcolor=color.new(ms_london_color, 40), color=color.rgb(0,0,0,100), size=get_size(ms_label_size))
        if ms_newyork_start and ms_newyork_show
            ms_newyork_box   := ms_display_type=='Boxes' ? box.new(left=bar_index, top=na, right=na, bottom=na, border_width=ms_border_width, bgcolor = ms_newyork_color, border_style = ms_border_style, border_color=color.new(ms_newyork_color, 40)) : na
            ms_newyork_label_obj :=  label.new(x=na, y=na, text=ms_newyork_text, textcolor=color.new(ms_newyork_color, 40), color=color.rgb(0,0,0,100), size=get_size(ms_label_size))
        if ms_sydney_start and ms_sydney_show
            ms_sydney_box    := ms_display_type=='Boxes' ? box.new(left=bar_index, top=na, right=na, bottom=na, border_width=ms_border_width, bgcolor = ms_sydney_color, border_style = ms_border_style, border_color=color.new(ms_sydney_color, 40)) : na
            ms_sydney_label_obj  :=  label.new(x=na, y=na, text=ms_sydney_text, textcolor=color.new(ms_sydney_color, 40), color=color.rgb(0,0,0,100), size=get_size(ms_label_size))


    // Updating session boxes during sessions
    if ms_in_tokyo_var and ms_in_range
        ms_tokyo_high_price := math.max(ms_tokyo_high_price, high)
        ms_tokyo_low_price := math.min(ms_tokyo_low_price, low)
        ms_update_box(ms_tokyo_box, ms_tokyo_label_obj, ms_tokyo_high_price, ms_tokyo_low_price)
    if ms_in_london_var and ms_in_range
        ms_london_high_price := math.max(ms_london_high_price, high)
        ms_london_low_price := math.min(ms_london_low_price, low)
        ms_update_box(ms_london_box, ms_london_label_obj, ms_london_high_price, ms_london_low_price)
    if ms_in_newyork_var and ms_in_range
        ms_newyork_high_price := math.max(ms_newyork_high_price, high)
        ms_newyork_low_price := math.min(ms_newyork_low_price, low)
        ms_update_box(ms_newyork_box, ms_newyork_label_obj, ms_newyork_high_price, ms_newyork_low_price)
    if ms_in_sydney_var and ms_in_range
        ms_sydney_high_price := math.max(ms_sydney_high_price, high)
        ms_sydney_low_price := math.min(ms_sydney_low_price, low)
        ms_update_box(ms_sydney_box, ms_sydney_label_obj, ms_sydney_high_price, ms_sydney_low_price)

    // Coloring background if display_type=='Zones'
    ms_tokyo_t   := time(timeframe.period, tokyo_time_range)
    ms_london_t  := time(timeframe.period, london_time_range)
    ms_newyork_t := time(timeframe.period, newyork_time_range)
    ms_sydney_t  := time(timeframe.period, sydney_time_range)

bgcolor(ms_display_type == 'Zones' and not ms_merge_sessions and ms_tokyo_show   and ms_in_range and  time == ms_tokyo_t   ? ms_tokyo_color   : na, editable = false)
bgcolor(ms_display_type == 'Zones' and not ms_merge_sessions and ms_london_show  and ms_in_range and  time == ms_london_t  ? ms_london_color  : na, editable = false)
bgcolor(ms_display_type == 'Zones' and not ms_merge_sessions and ms_newyork_show and ms_in_range and  time == ms_newyork_t ? ms_newyork_color : na, editable = false)
bgcolor(ms_display_type == 'Zones' and not ms_merge_sessions and ms_sydney_show  and ms_in_range and  time == ms_sydney_t  ? ms_sydney_color  : na, editable = false)
bgcolor(ms_display_type == 'Zones' and ms_merge_sessions and not ms_in_london_var  and ms_tokyo_show   and ms_in_range and  time == ms_tokyo_t   ? ms_tokyo_color   : na, editable = false)
bgcolor(ms_display_type == 'Zones' and ms_merge_sessions and not ms_in_newyork_var and ms_london_show  and ms_in_range and  time == ms_london_t  ? ms_london_color  : na, editable = false)
bgcolor(ms_display_type == 'Zones' and ms_merge_sessions and not ms_in_sydney_var  and ms_newyork_show and ms_in_range and  time == ms_newyork_t ? ms_newyork_color : na, editable = false)
bgcolor(ms_display_type == 'Zones' and ms_merge_sessions and not ms_in_tokyo_var   and ms_sydney_show  and ms_in_range and  time == ms_sydney_t  ? ms_sydney_color  : na, editable = false)

// Plotting sessions in Timeline form
plotshape(ms_display_type=='Timeline' and (ms_merge_sessions and ms_london_show  ? (ms_tokyo_show   and ms_in_tokyo_var   and not ms_in_london_var)  : ms_tokyo_show   and ms_in_tokyo_var),   style=shape.square, color=ms_tokyo_color,   location = location.bottom, size=size.auto, display = display.pane)
plotshape(ms_display_type=='Timeline' and (ms_merge_sessions and ms_newyork_show ? (ms_london_show  and ms_in_london_var  and not ms_in_newyork_var) : ms_london_show  and ms_in_london_var),  style=shape.square, color=ms_london_color,  location = location.bottom, size=size.auto, display = display.pane)
plotshape(ms_display_type=='Timeline' and (ms_merge_sessions and ms_sydney_show  ? (ms_newyork_show and ms_in_newyork_var and not ms_in_sydney_var)  : ms_newyork_show and ms_in_newyork_var), style=shape.square, color=ms_newyork_color, location = location.bottom, size=size.auto, display = display.pane)
plotshape(ms_display_type=='Timeline' and (ms_merge_sessions and ms_tokyo_show   ? (ms_sydney_show  and ms_in_sydney_var  and not ms_in_tokyo_var)   : ms_sydney_show  and ms_in_sydney_var),  style=shape.square, color=ms_sydney_color,  location = location.bottom, size=size.auto, display = display.pane)

// Creating alerts
alertcondition(ms_in_tokyo_var   and not ms_in_tokyo_var[1], 'Tokyo Open', 'The Tokyo Session has started')
alertcondition(ms_in_london_var  and not ms_in_london_var[1], 'London Open', 'The London Session has started')
alertcondition(ms_in_newyork_var and not ms_in_newyork_var[1], 'New York Open', 'The New York Session has started')
alertcondition(ms_in_sydney_var  and not ms_in_sydney_var[1], 'Sydney Open', 'The Sydney Session has started')
alertcondition(high > ms_tokyo_high_price[0]    and ms_in_tokyo_var, 'Tokyo Session - New High', 'New High in Tokyo Session')
alertcondition(high > ms_london_high_price[0]   and ms_in_london_var, 'London Session - New High', 'New High in London Session')
alertcondition(high > ms_newyork_high_price[0]  and ms_in_newyork_var, 'New York Session - New High', 'New High in New York Session')
alertcondition(high > ms_sydney_high_price[0]   and ms_in_sydney_var, 'Sydney Session - New High', 'New High in Sydney Session')
alertcondition(low  > ms_tokyo_low_price[0]     and ms_in_tokyo_var, 'Tokyo Session - New Low', 'New Low in Tokyo Session')
alertcondition(low  > ms_london_low_price[0]    and ms_in_london_var, 'London Session - New Low', 'New Low in London Session')
alertcondition(low  > ms_newyork_low_price[0]   and ms_in_newyork_var, 'New York Session - New Low', 'New Low In New York Session')
alertcondition(low  > ms_sydney_low_price[0]    and ms_in_sydney_var, 'Sydney Session - New Low', 'New Low In Sydney Session')

// === Volume Profile ===
vp_group = 'Volume Profile'

vp_show = input.bool(false, title='Enable', group=vp_group)
vp_bars_count = input.int(title='Number of Bars', defval=150, minval=1, maxval=500, group=vp_group, display = display.none)
vp_row_size = input.int(title='Row size', defval=24, minval=5, maxval=100, group=vp_group, display = display.none)
vp_percent = input.float(70., title='Value Area Volume Percent', minval=0, maxval=100, group=vp_group, display = display.none)
vp_poc_show = input.bool(false, title='POC', inline='poc', group=vp_group)
vp_poc_color = input.color(defval=#ff0000, title='Color', inline='poc', group=vp_group)
vp_poc_width = input.int(defval=2, title='Width', minval=1, maxval=5, inline='poc', group=vp_group, display = display.none)
vp_vup_color = input.color(defval=color.new(color.blue, 30), title='Value Area Up', group=vp_group)
vp_vdown_color = input.color(defval=color.new(color.orange, 30), title='Value Area Down', group=vp_group)
vp_up_color = input.color(defval=color.new(color.blue, 75), title='Up Volume', group=vp_group)
vp_down_color = input.color(defval=color.new(color.orange, 75), title='Down Volume', group=vp_group)

vp_get_vol(y11, y12, y21, y22, height, vol) => nz(math.max(math.min(math.max(y11, y12), math.max(y21, y22)) - math.max(math.min(y11, y12), math.min(y21, y22)), 0) * vol / height)

if vp_show 
    highest = ta.highest(vp_bars_count)
    lowest = ta.lowest(vp_bars_count)
    distance = (highest - lowest) / 500
    step = (highest - lowest) / vp_row_size

    levels = array.new_float(vp_row_size + 1)
    for x = 0 to vp_row_size by 1
        array.set(levels, x, lowest + step * x)

    if barstate.islast
        volumes = array.new_float(vp_row_size * 2, 0.)
        for bars = 0 to vp_bars_count - 1 by 1
            body_top = math.max(close[bars], open[bars])
            body_bot = math.min(close[bars], open[bars])
            its_green = close[bars] >= open[bars]

            top_wick = high[bars] - body_top
            bottom_wick = body_bot - low[bars]
            body = body_top - body_bot

            body_vol = body * volume[bars] / (2 * top_wick + 2 * bottom_wick + body)
            top_wick_vol = 2 * top_wick * volume[bars] / (2 * top_wick + 2 * bottom_wick + body)
            bottom_wick_vol = 2 * bottom_wick * volume[bars] / (2 * top_wick + 2 * bottom_wick + body)
            for x = 0 to vp_row_size - 1 by 1
                array.set(volumes, x, array.get(volumes, x) + (its_green ? vp_get_vol(array.get(levels, x), array.get(levels, x + 1), body_bot, body_top, body, body_vol) : 0) + vp_get_vol(array.get(levels, x), array.get(levels, x + 1), body_top, high[bars], top_wick, top_wick_vol) / 2 + vp_get_vol(array.get(levels, x), array.get(levels, x + 1), body_bot, low[bars], bottom_wick, bottom_wick_vol) / 2)
                array.set(volumes, x + vp_row_size, array.get(volumes, x + vp_row_size) + (its_green ? 0 : vp_get_vol(array.get(levels, x), array.get(levels, x + 1), body_bot, body_top, body, body_vol)) + vp_get_vol(array.get(levels, x), array.get(levels, x + 1), body_top, high[bars], top_wick, top_wick_vol) / 2 + vp_get_vol(array.get(levels, x), array.get(levels, x + 1), body_bot, low[bars], bottom_wick, bottom_wick_vol) / 2)

        total_volumes = array.new_float(vp_row_size, 0.)
        for x = 0 to vp_row_size - 1 by 1
            array.set(total_volumes, x, array.get(volumes, x) + array.get(volumes, x + vp_row_size))

        poc = array.indexof(total_volumes, array.max(total_volumes))

        total_max = array.sum(total_volumes) * vp_percent / 100.
        va_total = array.get(total_volumes, poc)
        up = poc
        down = poc
        for x = 0 to vp_row_size - 1 by 1
            if va_total >= total_max
                break
            vp_upper_vol = up < vp_row_size - 1 ? array.get(total_volumes, up + 1) : 0.
            vp_lower_vol = down > 0 ? array.get(total_volumes, down - 1) : 0.
            if vp_upper_vol == 0 and vp_lower_vol == 0
                break
            if vp_upper_vol >= vp_lower_vol
                va_total += vp_upper_vol
                up += 1
            else
                va_total += vp_lower_vol
                down -= 1

        max_volume = array.max(total_volumes)
        for x = 0 to vp_row_size * 2 - 1 by 1
            array.set(volumes, x, array.get(volumes, x) * vp_bars_count / (3 * max_volume))

        volume_bars = array.new_box(vp_row_size * 2, na)
        for x = 0 to vp_row_size - 1 by 1
            box.delete(array.get(volume_bars, x))
            box.delete(array.get(volume_bars, x + vp_row_size))
            array.set(volume_bars, x, box.new(bar_index - vp_bars_count + 1, array.get(levels, x + 1) - distance,  bar_index - vp_bars_count + 1 + math.round(array.get(volumes, x)), array.get(levels, x) + distance, border_width=0, bgcolor=x >= down and x <= up ? vp_vup_color : vp_up_color))
            array.set(volume_bars, x + vp_row_size, box.new(bar_index - vp_bars_count + 1 + math.round(array.get(volumes, x)),  array.get(levels, x + 1) - distance, bar_index - vp_bars_count + 1 + math.round(array.get(volumes, x)) + math.round(array.get(volumes, x + vp_row_size)), array.get(levels, x) + distance, border_width=0, bgcolor=x >= down and x <= up ? vp_vdown_color : vp_down_color))

        poc_level = (array.get(levels, poc) + array.get(levels, poc + 1)) / 2
        var line vp_poc_line = na
        if vp_poc_show
            line.delete(vp_poc_line)
            vp_poc_line := line.new(bar_index - vp_bars_count + 1, poc_level, bar_index - vp_bars_count + 2, poc_level, extend=extend.right, color=vp_poc_color, width=vp_poc_width)

// === Williams Fractal ===
wf_group = 'Williams Fractal'

wf_show = input.bool(false, title = 'Enable', group = wf_group)

var bool wf_bullish = false
var bool wf_bearish = false

if wf_show
    wf_bullish := high[2] > high[3] and high[2] > high[4] and high[2] > high[1] and high[2] > high[0]
    wf_bearish := low[2] < low[3] and low[2] < low[4] and low[2] < low[1] and low[2] < low[0]

plotshape(wf_bullish, title="Up Fractal", location=location.abovebar, style=shape.triangledown, color=color.red, size=size.tiny, offset=-2, display = display.pane)
plotshape(wf_bearish, title="Down Fractal", location=location.belowbar, style=shape.triangleup, color=color.green, size=size.tiny, offset=-2, display = display.pane)

