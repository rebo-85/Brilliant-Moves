// This script is licensed under Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International
// https://creativecommons.org/licenses/by-nc-sa/4.0/
// © QuantAlgo

//@version=6
indicator("Logarithmic Moving Average (LMA) [QuantAlgo]", overlay=false)

//              ╔═══════════════════════════════╗              //
//              ║      USER DEFINED INPUTS      ║              //
//              ╚═══════════════════════════════╝              //

// Input Groups
var string preset_settings        = "════════ Strategy Presets ════════"
var string lma_settings           = "════════ LMA Core Settings ════════"
var string threshold_settings     = "════════ Trading Thresholds ════════"
var string visual_settings        = "════════ Visual Settings ════════"

// Tooltips
tooltip_preset = "Select a predefined configuration optimized for different trading approaches. Each preset adjusts period, steepness, smoothing, and thresholds to match the selected strategy."
var string tooltip_preset_details = "Default (100, 2.5, 10, ±0.5): Universally applicable configuration that works well across multiple timeframes and assets. Balanced for medium-term investing and general trading.\n\n" +
                                     "Scalping (60, 3.0, 5, ±0.3): Highly responsive for ultra-short-term trades. More sensitive to quick price movements. Best for 1-15min charts.\n\n" +
                                     "Swing Trading (120, 2.0, 15, ±0.7): Designed for multi-day positions with stronger noise filtering. Focuses on larger price swings. Works best on 1-4h and daily charts.\n\n" +
                                     "Trend Following (150, 1.8, 20, ±1.0): Maximum smoothing for established trends only. Generates fewer but more reliable signals. Best for daily/weekly charts.\n\n" +
                                     "Mean Reversion (80, 3.5, 8, ±0.4): Optimized for counter-trend strategies. More sensitive to extreme moves for reversal opportunities. Best for ranging markets."

tooltip_period                    = "The number of bars to include in the logarithmic moving average calculation.\n\n" +
                                     "• Lower values (50-80): More responsive to recent price changes, better for short-term signals, but may produce more noise\n" +
                                     "• Medium values (80-120): Balanced approach suitable for most trading styles and timeframes\n" +
                                     "• Higher values (120-200): More stable signals, better for long-term trends, less sensitive to market noise\n\n" +
                                     "Effect: Determines how much historical data influences the current signal. Higher values provide smoother but slower signals."

tooltip_steepness                 = "Controls the logarithmic weight decay rate - how aggressively recent data is prioritized over older data.\n\n" +
                                     "• Lower values (1.5-2.0): Gradual weight decay, smoother signals, includes more historical context, less reactive\n" +
                                     "• Medium values (2.0-3.0): Balanced weight distribution, good for most market conditions\n" +
                                     "• Higher values (3.0-5.0): Steep weight decay, highly responsive to recent price action, more volatile signals\n\n" +
                                     "Mathematical effect: Controls the logarithmic decay rate in the weighting formula. Higher steepness means recent bars get exponentially more importance."

tooltip_ma_type                   = "Type of moving average used for final signal smoothing.\n\n" +
                                     "• EMA: Exponential Moving Average - responsive, good for trending markets\n" +
                                     "• SMA: Simple Moving Average - stable, equal weight to all periods\n" +
                                     "• WMA: Weighted Moving Average - linear weight decay, moderate responsiveness\n" +
                                     "• RMA: Rolling Moving Average - very smooth, similar to EMA but more stable\n" +
                                     "• VWMA: Volume Weighted Moving Average - incorporates volume data for better accuracy"

tooltip_smooth                    = "Number of periods used to smooth the final LMA signal using the selected moving average type.\n\n" +
                                     "• Lower values (3-8): More sensitive signals, quicker response to trend changes, more trading opportunities, but higher noise\n" +
                                     "• Medium values (8-15): Balanced signal quality with reasonable responsiveness\n" +
                                     "• Higher values (15-25): Smoother signals, fewer false signals, reduced whipsaws, but slower response to trend changes\n\n" +
                                     "Effect: Reduces signal noise and prevents whipsaws at the cost of some delay in signal generation."

tooltip_momentum_weight           = "Multiplier applied when logarithmic momentum confirms the LMA signal direction.\n\n" +
                                     "• 1.0: No momentum confirmation boost, pure LMA signal\n" +
                                     "• 1.2-1.5: Moderate boost when momentum aligns with trend (recommended range)\n" +
                                     "• 1.5-2.0: Strong boost for momentum-confirmed signals, more aggressive approach\n\n" +
                                     "Effect: Strengthens signals when short-term price momentum aligns with the overall LMA trend direction, helping to filter out weak or counter-trend signals."

tooltip_long_threshold            = "Signal value required to trigger long entry alerts and bullish position classification.\n\n" +
                                     "• Lower values (0.1-0.5): More frequent long signals, higher sensitivity, but increased risk of false positives\n" +
                                     "• Medium values (0.5-1.0): Balanced approach suitable for most trading strategies\n" +
                                     "• Higher values (1.0-2.0): Fewer but potentially more reliable long signals, requires stronger bullish momentum\n\n" +
                                     "Recommendation: Start with default value and adjust based on your risk tolerance and trading frequency preferences."

tooltip_short_threshold           = "Signal value required to trigger short entry alerts and bearish position classification.\n\n" +
                                     "• Higher values (-0.1 to -0.5): More frequent short signals, higher sensitivity, but increased risk of false positives\n" +
                                     "• Medium values (-0.5 to -1.0): Balanced approach suitable for most trading strategies\n" +
                                     "• Lower values (-1.0 to -2.0): Fewer but potentially more reliable short signals, requires stronger bearish momentum\n\n" +
                                     "Recommendation: Should typically mirror your long threshold value but with opposite sign for symmetrical trading approach."

tooltip_color_bars                = "Enable/disable coloring of price bars based on LMA signal direction.\n\n" +
                                     "• Enabled: Price bars will be colored to match the current LMA signal (bullish=green, bearish=red, neutral=yellow)\n" +
                                     "• Disabled: Price bars retain their default coloring scheme\n\n" +
                                     "Useful for: Quick visual identification of current market sentiment according to LMA analysis."

// Strategy Presets
strategy_preset = input.string("Default", "Strategy Preset", 
     options = ["Default", "Scalping", "Swing Trading", "Trend Following", "Mean Reversion", "Custom"],
     group = preset_settings,
     tooltip = tooltip_preset + "\n\n" + tooltip_preset_details)

// LMA Core Settings
period = input.int(100, "LMA Period", minval=50, maxval=200, 
                   group=lma_settings, tooltip=tooltip_period)

steepness = input.float(2.5, "Log Steepness", minval=1.5, maxval=5.0, step=0.1,
                         group=lma_settings, tooltip=tooltip_steepness)

ma_type = input.string("EMA", "Smoothing MA Type", 
                       options=["EMA", "SMA", "WMA", "RMA", "VWMA"],
                       group=lma_settings, tooltip=tooltip_ma_type)

smooth = input.int(10, "Signal Smoothing", minval=3, maxval=25,
                   group=lma_settings, tooltip=tooltip_smooth)

momentumWeight = input.float(1.2, "Momentum Confirmation Weight", minval=1.0, maxval=2.0, step=0.1,
                             group=lma_settings, tooltip=tooltip_momentum_weight)

// Long/Short Thresholds
longThreshold = input.float(0.5, "Long Entry Threshold", minval=0.1, maxval=2.0, step=0.1,
                           group=threshold_settings, tooltip=tooltip_long_threshold)

shortThreshold = input.float(-0.5, "Short Entry Threshold", minval=-2.0, maxval=-0.1, step=0.1,
                             group=threshold_settings, tooltip=tooltip_short_threshold)

// Visual Settings
col_u = input.color(#00ffaa, "Bullish Color", inline="colors", group=visual_settings)
col_d = input.color(#ff0000, "Bearish Color", inline="colors", group=visual_settings)
col_neutral = input.color(#ffff00, "Neutral Color", inline="colors", group=visual_settings)
colorBars = input.bool(true, "Color Price Bars", group=visual_settings, tooltip=tooltip_color_bars)

// Strategy preset
if strategy_preset != "Custom"
    if strategy_preset == "Scalping"
        period := 60
        steepness := 3.0
        smooth := 5
        longThreshold := 0.3
        shortThreshold := -0.3
    else if strategy_preset == "Swing Trading"
        period := 120
        steepness := 2.0
        smooth := 15
        longThreshold := 0.7
        shortThreshold := -0.7
    else if strategy_preset == "Trend Following"
        period := 150
        steepness := 1.8
        smooth := 20
        longThreshold := 1.0
        shortThreshold := -1.0
    else if strategy_preset == "Mean Reversion"
        period := 80
        steepness := 3.5
        smooth := 8
        longThreshold := 0.4
        shortThreshold := -0.4

//              ╔═══════════════════════════════╗              //
//              ║    MOVING AVERAGE FUNCTION    ║              //
//              ╚═══════════════════════════════╝              //

get_ma(src, length, ma_type) =>
    switch ma_type
        "EMA" => ta.ema(src, length)
        "SMA" => ta.sma(src, length)
        "WMA" => ta.wma(src, length)
        "RMA" => ta.rma(src, length)
        "VWMA" => ta.vwma(src, length)
        => ta.ema(src, length)  // Default fallback

//              ╔═══════════════════════════════╗              //
//              ║      LOGARITHMIC WEIGHTS      ║              //
//              ╚═══════════════════════════════╝              //

weights = array.new<float>()
totalWeight = 0.0

for i = 0 to period - 1
    // Ensure we never have log(value) where value <= 1 to avoid division by zero
    logArg = math.max(i + steepness, 2.0)  // Minimum value of 2.0
    w = 1.0 / math.pow(math.log(logArg), 2)
    array.push(weights, w)
    totalWeight := totalWeight + w

//              ╔═══════════════════════════════╗              //
//              ║       CORE CALCULATIONS       ║              //
//              ╚═══════════════════════════════╝              //

// Calculate logarithmic moving average with bounds checking
lma = 0.0
for i = 0 to period - 1
    if i <= bar_index and not na(close[i])  // Added na() check
        w = array.get(weights, i)
        lma := lma + close[i] * w

lma := totalWeight > 0 ? lma / totalWeight : close  // Prevent division by zero

// Calculate LMA slope with null check
lmaSlope = 0.0
if not na(lma[10]) and lma[10] != 0
    lmaSlope := (lma - lma[10]) / lma[10] * 100

// Log-return momentum with error handling
logReturns = 0.0
if not na(close[1]) and close[1] > 0 and close > 0
    logReturns := math.log(close / close[1])

logMomentum = math.sum(logReturns, period) * 252 / period  // Annualized

// Trend quality calculation with error handling
sumX = 0.0
sumY = 0.0
sumXY = 0.0
sumX2 = 0.0
sumY2 = 0.0
validPoints = 0

for i = 0 to period - 1
    if not na(close[i]) and close[i] > 0  // Only include valid price points
        x = float(i)
        y = math.log(close[i])
        sumX := sumX + x
        sumY := sumY + y
        sumXY := sumXY + x * y
        sumX2 := sumX2 + x * x
        sumY2 := sumY2 + y * y
        validPoints := validPoints + 1

// Calculate correlation with division by zero protection
correlation = 0.0
if validPoints > 10  // Ensure we have enough data points
    denominator = math.sqrt((validPoints * sumX2 - sumX * sumX) * (validPoints * sumY2 - sumY * sumY))
    if denominator != 0
        correlation := (validPoints * sumXY - sumX * sumY) / denominator

rSquared = math.max(0, math.min(1, correlation * correlation))  // Clamp between 0 and 1

//              ╔═══════════════════════════════╗              //
//              ║       SIGNAL GENERATION       ║              //
//              ╚═══════════════════════════════╝              //

signal = lmaSlope * (0.5 + rSquared * 0.5)

if math.sign(signal) == math.sign(logMomentum) and math.abs(logMomentum) > 0.01
    signal := signal * momentumWeight

smoothSignal = get_ma(signal, smooth, ma_type)

position = smoothSignal > longThreshold ? "𝐁𝐮𝐥𝐥𝐢𝐬𝐡" : 
           smoothSignal < shortThreshold ? "𝐁𝐞𝐚𝐫𝐢𝐬𝐡" : "𝐍𝐞𝐮𝐭𝐫𝐚𝐥"

//              ╔═══════════════════════════════╗              //
//              ║        VISUALIZATION          ║              //
//              ╚═══════════════════════════════╝              //

getBrightness(col) =>
    r = color.r(col)
    g = color.g(col)
    b = color.b(col)
    (0.299 * r + 0.587 * g + 0.114 * b)

signalColor = if smoothSignal > longThreshold
    // Strong bullish
    col_u
else if smoothSignal > 0
    // Weak bullish
    color.from_gradient(smoothSignal, 0, longThreshold, col_neutral, col_u)
else if smoothSignal < shortThreshold
    // Strong bearish
    col_d
else if smoothSignal < 0
    // Weak bearish
    color.from_gradient(smoothSignal, shortThreshold, 0, col_d, col_neutral)
else
    col_neutral

textColor = getBrightness(signalColor) > 150 ? color.black : color.white

pm = plot(smoothSignal, "LMA Signal", color = signalColor, linewidth=3)
p0 = plot(0, display = display.none)

fill(pm, p0,
     smoothSignal > 0 ? smoothSignal : 0,
     smoothSignal > 0 ? 0 : smoothSignal,
     smoothSignal > 0 ? color.new(signalColor, 10) : #00000000,
     smoothSignal > 0 ? #00000000 : color.new(signalColor, 10),
     title="LMA Signal Fill")

hline(longThreshold, "Long Threshold", color=color.new(col_u, 30), linestyle=hline.style_dashed, linewidth=1)
hline(shortThreshold, "Short Threshold", color=color.new(col_d, 30), linestyle=hline.style_dashed, linewidth=1)
hline(0, "Neutral Line", color=color.new(color.gray, 0), linestyle=hline.style_solid, linewidth=2)

var label positionLabel = na
if barstate.islast
    label.delete(positionLabel)
    
    positionLabel := label.new(bar_index + 2, smoothSignal, 
                              text = position, 
                              color = color.new(signalColor, 10), 
                              textcolor = textColor,
                              style = label.style_label_left,
                              size = size.normal)

barcolor(colorBars ? signalColor : na, title="LMA Signal Bar Colors")

//              ╔═══════════════════════════════╗              //
//              ║            ALERTS             ║              //
//              ╚═══════════════════════════════╝              //

// Direction Changes
alertcondition(ta.crossover(smoothSignal, 0), "Bullish Signal", "LMA Signal Turned Bullish - Potential Long Entry")
alertcondition(ta.crossunder(smoothSignal, 0), "Bearish Signal", "LMA Signal Turned Bearish - Potential Short Entry")

// Threshold Crossovers
alertcondition(ta.crossover(smoothSignal, longThreshold), "Long Entry Signal", "LMA Signal Crossed Above Long Threshold - Strong Bullish Signal")
alertcondition(ta.crossunder(smoothSignal, longThreshold), "Long Exit Signal", "LMA Signal Crossed Below Long Threshold - Bullish Strength Weakening")
alertcondition(ta.crossunder(smoothSignal, shortThreshold), "Short Entry Signal", "LMA Signal Crossed Below Short Threshold - Strong Bearish Signal")
alertcondition(ta.crossover(smoothSignal, shortThreshold), "Short Exit Signal", "LMA Signal Crossed Above Short Threshold - Bearish Strength Weakening")

// Neutral Zone
alertcondition(position == "NEUTRAL" and position[1] != "NEUTRAL", "Neutral Zone Entry", "LMA Signal Entered Neutral Zone - Trend Uncertainty")
alertcondition(position != "NEUTRAL" and position[1] == "NEUTRAL", "Neutral Zone Exit", "LMA Signal Exited Neutral Zone - Trend Direction Established")

// Momentum Confirmation
momentumConfirmed = math.sign(smoothSignal) == math.sign(logMomentum) and math.abs(smoothSignal) > math.abs(longThreshold) * 0.5
alertcondition(momentumConfirmed and not momentumConfirmed[1], "Momentum Confirmation", "LMA Signal Confirmed by Momentum - High Probability Setup")

//              ╔═══════════════════════════════╗              //
//              ║          CREATED BY           ║              //
//              ╚═══════════════════════════════╝              //

// ██████╗ ██╗   ██╗ █████╗ ███╗   ██╗████████╗     █████╗ ██╗      ██████╗  ██████╗ 
//██╔═══██╗██║   ██║██╔══██╗████╗  ██║╚══██╔══╝    ██╔══██╗██║     ██╔════╝ ██╔═══██╗
//██║   ██║██║   ██║███████║██╔██╗ ██║   ██║       ███████║██║     ██║  ███╗██║   ██║
//██║▄▄ ██║██║   ██║██╔══██║██║╚██╗██║   ██║       ██╔══██║██║     ██║   ██║██║   ██║
//╚██████╔╝╚██████╔╝██║  ██║██║ ╚████║   ██║       ██║  ██║███████╗╚██████╔╝╚██████╔╝
// ╚══▀▀═╝  ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═══╝   ╚═╝       ╚═╝  ╚═╝╚══════╝ ╚═════╝  ╚═════╝