//@version=6
strategy("ðŸ§  MACD+MA+ATR Strategy (Optimized v6.2 - Profit Enhanced)", overlay=true, default_qty_type=strategy.percent_of_equity, default_qty_value=100)

// === INPUTS ===
// --- MACD ---
macd_fast   = input.int(12, title="MACD Fast")
macd_slow   = input.int(26, title="MACD Slow")
macd_signal = input.int(9, title="MACD Signal")

// --- MA ---
ma_len   = input.int(50, title="MA Length", minval=10, maxval=200)
ma_type  = input.string("ema", title="MA Type", options=["ema", "sma"])

// --- ATR & Risk Management ---
atr_len          = input.int(14, title="ATR Length", minval=5, maxval=20)
atr_sl_mult      = input.float(1.5, title="SL Multiplier", minval=1.0, maxval=3.0, step=0.1)
atr_tp_mult      = input.float(2.5, title="TP Multiplier", minval=1.5, maxval=4.0, step=0.1)
breakeven_buffer = input.float(0.4, title="Breakeven Buffer (xATR)")
breakeven_delay  = input.int(2, title="Bars to Wait Before Breakeven")
use_trailing     = input.bool(true, title="Enable Trailing Stop")
trail_mult       = input.float(2.0, title="Trailing Stop ATR Mult", step=0.1)

// --- RSI Filter ---
rsi_src         = input.source(close, title="RSI Source")
rsi_len         = input.int(14, title="RSI Length")
rsi_long_thresh = input.int(45, title="RSI Long Threshold")
rsi_short_thresh = input.int(55, title="RSI Short Threshold")

// --- Session Filter ---
session_filter     = input.bool(true, title="Enable Session Filter")
session_start_hour = input.int(9, title="Session Start Hour (PH)", minval=0, maxval=23)
session_end_hour   = input.int(16, title="Session End Hour (PH)", minval=0, maxval=23)

// --- Cooldown ---
cooldown_bars = input.int(2, title="Cooldown Bars Between Entries")

// --- Volatility Filter ---
enable_volatility_filter = input.bool(true, title="Enable Volatility Filter")
volatility_smooth        = input.int(20, title="ATR Volatility MA Length")
volatility_threshold     = input.float(1.2, title="Volatility Threshold", step=0.1)

// --- Heikin-Ashi Filter ---
enable_ha_filter = input.bool(true, title="Enable Heikin-Ashi Trend Filter")

// === CALCULATIONS ===
[macd, signal, _] = ta.macd(close, macd_fast, macd_slow, macd_signal)
macd_crossup     = ta.crossover(macd, signal)
macd_crossdown   = ta.crossunder(macd, signal)

ma = ma_type == "ema" ? ta.ema(close, ma_len) : ta.sma(close, ma_len)
ma_slope = ma - ma[1]
atr = ta.atr(atr_len)
rsi = ta.rsi(rsi_src, rsi_len)

// --- Multi-timeframe MA (15m) for trend confirmation ---
ma_15m = request.security(syminfo.tickerid, "15", ta.ema(close, ma_len))

// --- Volatility Filter ---
atr_smooth = ta.sma(atr, volatility_smooth)
volatility_ok = not enable_volatility_filter or (atr > atr_smooth * volatility_threshold)

// --- Heikin-Ashi Filter ---
ha_close = (open + high + low + close) / 4
var float ha_open = na
ha_open := na(ha_open[1]) ? (open + close) / 2 : (ha_open[1] + ha_close[1]) / 2
ha_bull  = ha_close > ha_open
ha_bear  = ha_close < ha_open

// --- Candle Strength Confirmation ---
bull_candle = close > open and close > close[1]
bear_candle = close < open and close < close[1]

// --- Conditions ---
rsi_ok_long      = rsi > rsi_long_thresh
rsi_ok_short     = rsi < rsi_short_thresh
in_session       = not session_filter or (hour >= session_start_hour and hour < session_end_hour)
ha_trend_ok_long  = not enable_ha_filter or ha_bull
ha_trend_ok_short = not enable_ha_filter or ha_bear

// --- Cooldown ---
var int last_trade_bar = na
cooldown_ok        = na(last_trade_bar) or (bar_index - last_trade_bar >= cooldown_bars)
bars_since_entry   = bar_index - last_trade_bar
breakeven_delay_ok = bars_since_entry >= breakeven_delay

// === Entry Logic ===
long_condition = macd_crossup and close > ma and close > ma_15m and ma_slope > 0 and rsi_ok_long and bull_candle and cooldown_ok and in_session and volatility_ok and ha_trend_ok_long

short_condition = macd_crossdown and close < ma and close < ma_15m and ma_slope < 0 and rsi_ok_short and bear_candle and cooldown_ok and in_session and volatility_ok and ha_trend_ok_short

// === Breakeven Logic ===
breakeven_long_price  = strategy.position_avg_price + atr * breakeven_buffer
breakeven_short_price = strategy.position_avg_price - atr * breakeven_buffer
move_to_breakeven_long  = strategy.position_size > 0 and close >= breakeven_long_price and breakeven_delay_ok
move_to_breakeven_short = strategy.position_size < 0 and close <= breakeven_short_price and breakeven_delay_ok

// === Execution ===
if (long_condition)
    strategy.entry("Long", strategy.long)
    if use_trailing
        strategy.exit("Trail/SL Long", from_entry="Long", trail_points=atr * trail_mult, trail_offset=atr * trail_mult * 0.8)
    else
        strategy.exit("TP/SL Long", from_entry="Long", stop=close - atr * atr_sl_mult, limit=close + atr * atr_tp_mult)
    last_trade_bar := bar_index

if (short_condition)
    strategy.entry("Short", strategy.short)
    if use_trailing
        strategy.exit("Trail/SL Short", from_entry="Short", trail_points=atr * trail_mult, trail_offset=atr * trail_mult * 0.8)
    else
        strategy.exit("TP/SL Short", from_entry="Short", stop=close + atr * atr_sl_mult, limit=close - atr * atr_tp_mult)
    last_trade_bar := bar_index

if (move_to_breakeven_long)
    strategy.exit("BE Long", from_entry="Long", stop=strategy.position_avg_price)

if (move_to_breakeven_short)
    strategy.exit("BE Short", from_entry="Short", stop=strategy.position_avg_price)

// === Plots ===
plot(ma, title="MA", color=color.purple)
plot(macd, title="MACD", color=color.orange)
plot(signal, title="Signal", color=color.blue)
plot(rsi, title="RSI", color=color.teal)
plot(ma_15m, title="15m MA", color=color.gray)

plotshape(long_condition, title="Buy", text="Buy", style=shape.labelup, location=location.belowbar, color=color.green, textcolor=color.white, size=size.tiny)
plotshape(short_condition, title="Sell", text="Sell", style=shape.labeldown, location=location.abovebar, color=color.red, textcolor=color.white, size=size.tiny)

// === Performance Table ===
var table statTable = table.new(position.top_right, 2, 5, border_width=1)
if bar_index % 10 == 0
    net_profit = str.tostring(strategy.netprofit, "#.##")
    win_rate   = strategy.closedtrades > 0 ? str.tostring(strategy.wintrades / strategy.closedtrades * 100, "#.##") + "%" : "N/A"
    pf         = strategy.losstrades > 0 ? str.tostring(strategy.grossprofit / strategy.grossloss, "#.##") : "âˆž"
    total_trades = str.tostring(strategy.closedtrades)

    table.cell(statTable, 0, 0, "Net Profit", text_color=color.white)
    table.cell(statTable, 1, 0, net_profit)
    table.cell(statTable, 0, 1, "Win %", text_color=color.white)
    table.cell(statTable, 1, 1, win_rate)
    table.cell(statTable, 0, 2, "PF", text_color=color.white)
    table.cell(statTable, 1, 2, pf)
    table.cell(statTable, 0, 3, "Trades", text_color=color.white)
    table.cell(statTable, 1, 3, total_trades)
